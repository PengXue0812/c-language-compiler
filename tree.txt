yacc -d c_compiler.y
sed -i "1i \#include \"Node/BaseNode.h\"" y.tab.h
sed -i "2i \#include \"Node/BTNode.h\"" y.tab.h
sed -i "3i \#include \"Symbol/Symbol.h\"" y.tab.h
sed -i "4i \#include \"AsmCode/AsmCode.h\"" y.tab.h
sed -i "5i \#include \"AsmCode/AsmCodeGenerate.h\"" y.tab.h
g++ y.tab.c lex.yy.c Node/BaseNode.cpp Symbol/Symbol.cpp InterCode/InterCode.cpp AsmCode/AsmCode.cpp AsmCode/AsmCodeGenerate.cpp -o a.out
./a.out
                                                      program                                                                                                                                            
                                                         |                                                                                                                                               
    ____________________________________________Def_Func_Block_Body_____________________________________________                                                                                         
   /               /                                                                                            \                                                                                        
int_Type Function_Without_Param                                                                                Body                                                                                      
                   |                                                                                            |                                                                                        
                  main                        _______________________________________________For_Def_SEMI_Expression_SEMI_Expression________________________________________________                     
                                             /                                                  /                                         \                                         \                    
                                        For_Declare                                    ___Less_Operation___                      ________Add_________                         Body_Statement             
                                             |                                        /                    \                    /                    \                              |                    
                                    _Declare_Statement__                    Identifier_Expression Constant_Expression Identifier_Expression Constant_Expression                    Body                  
                                   /                    \                            /                    /                    /                     |                              |                    
                                int_Type         Declare_Variable                    id                   10                   id                    1                     Expression_Statement          
                                                        |                            |                                         |                                                    |                    
                                                _Variable_Assign_                    i                                         i                                           ________Add_________          
                                               /                 \                                                                                                        /                    \         
                                         Def_Identifier Constant_Expression                                                                                     Identifier_Expression Constant_Expression
                                               |                 |                                                                                                       /                     |         
                                               i                 0                                                                                                       id                    1         
                                                                                                                                                                         |                               
                                                                                                                                                                         i                               
program
Def_Func_Block_Body
int_Type
Function_Without_Param
main
Body
-----------------NodeContent: For_Def_SEMI_Expression_SEMI_Expression
begin add area
add first area
@ íÔý
Constant_Expression
nishiadsa:i
Less_Operation
0x55c69f050710
Identifier_Expression
AAA:i
aaaaaaaaaaaaaaaaaaaa:0x55c69f0507e0
Constant_Expression
-----------------NodeContent: Body_Statement
-----------------NodeContent: Expression_Statement
Add
Identifier_Expression
AAA:i
aaaaaaaaaaaaaaaaaaaa:0x55c69f0507e0
Constant_Expression
Add
Identifier_Expression
AAA:i
aaaaaaaaaaaaaaaaaaaa:0x55c69f0507e0
Constant_Expression
L0:  i := 0
L1:  if i < 10 goto L3
L2:   goto L6
L3:  temp 0 := i ADD 1
L4:  temp 1 := i ADD 1
L5:   goto L1
L6:  END
=========begin generate asm code=========
è¿™ä¸ªæ˜¯è·³è½¬æŒ‡ä»¤
è¿™ä¸ªæ˜¯è·³è½¬æŒ‡ä»¤
è¿™ä¸ªæ˜¯è·³è½¬æŒ‡ä»¤
æ·»åŠ LABEL
æ·»åŠ LABEL
æ·»åŠ LABEL
Symbol Area: 0x55c69f04edd0

Generating asm code!!!
begin _asm
size=10
optype: 5
L0:  i := 0
flag = 6
optype: 10
gengrate LABEL
optype: 12
L2:  if i < 10 goto L3
jump_flag= 1
optype: 11
L3:   goto L6
jump_flag= 3
optype: 10
gengrate LABEL
optype: 0
L5:  temp 0 := i ADD 1
flag = 5
tempVar1Reg=-1, tempVar2Reg=-1, resultReg=-1
ebx == 0
optype: 0
L6:  temp 1 := i ADD 1
flag = 5
tempVar1Reg=-1, tempVar2Reg=-1, resultReg=-1
ecx == 0
optype: 11
L7:   goto L1
jump_flag= 3
optype: 10
gengrate LABEL
optype: 21
L9:  END
extern exit

section .text
global main
main:
push ebx
mov ebp,esp

mov [ebp+4],dword 0

label2:
cmp [ebp+4],dword 10
jl label0
jmp label1

label0:
xor ebx,ebx
mov ebx,dword[ebp+4]
add ebx,dword 1
xor ecx,ecx
mov ecx,dword[ebp+4]
add ecx,dword 1
jmp label2

label1:
pop ebx
push 0
call exit
%include './AsmCode/print_int_i.asm'write ok!!
nasm -g -f elf -d ELF_TYPE ./AsmCode/asm_io.asm -o ./AsmCode/asm_io.o
ld -m elf_i386 ./AsmCode/asm_io.o -o asm_io --entry main -lc -dynamic-linker /lib/ld-linux.so.2
./asm_io
